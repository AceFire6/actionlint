actionlint(1) -- static checker for GitHub Actions workflow files
=================================================================

## SYNOPSIS

`actionlint` [<flags>] <br>
`actionlint` [<flags>] <file>...<br>
`actionlint` [<flags>] -<br>


## DESCRIPTION

**actionlint** is a linter for GitHub Actions workflow files.

Features:

- **Syntax check for workflow files** to check unexpected or missing keys following workflow syntax
- **Strong type check for `${{ }}` expressions** to catch several semantic errors like access to
  not existing property, type mismatches, ...
- **Actions usage check** to check that inputs at `with:` and outputs in `steps.{id}.outputs` are
  correct
- **shellcheck and pyflakes integrations** for scripts in `run:`
- **Other several useful checks**; glob syntax validation, dependencies check for `needs:`, runner
  label validation, cron syntax validation, ...


## USAGE

To check all workflow files in the current repository, just run **actionlint** without arguments.
It automatically finds the nearest `.github/workflows` directory:

    $ actionlint

To check specific workflow files, pass the file paths as arguments:

    $ actionlint file1.yaml file2.yaml

To check a content which is not saved in file yet (e.g. output from some command), pass **-**
argument. It reads stdin and checks it as workflow file:

    $ actionlint -


## FLAGS

  * `-color`:
    Always enable colorful output. This is useful to force colorful outputs

  * `-config-file` <PATH>:
    File path to config file

  * `-debug`:
    Enable debug output (for development)

  * `-ignore` <PATTERN>:
    Regular expression matching to error messages you want to ignore. This flag is repeatable. For
    example, `-gnore A -ignore B` ignores errors whose message includes "A" OR "B".

  * `-init-config`:
    Generate default config file at `.github/actionlint.yaml` in current project

  * `-no-color`:
    Disable colorful output

  * `-oneline`:
    Use one line per one error. Useful for reading error messages from programs

  * `-pyflakes` <EXECUTABLE>:
    Command name or file path of "pyflakes" external command (default "pyflakes")

  * `-shellcheck` <EXECUTABLE>:
    Command name or file path of "shellcheck" external command (default "shellcheck")

  * `-verbose`:
    Enable verbose output

  * `-version`:
    Show version and how this binary was installed

  * `-help`, `-h`:
    Show help


## CONFIGURATION

Configuration file can be put at `.github/actionlint.yaml` or `.github/actionlint.yml`.

Note that configuration file is basically unnecessary. Please consider to make it only when it is
necessary. Since the author tries to keep configuration file as minimal as possible, currently only
custom runner labels can be configured.

```
self-hosted-runner:
  # Labels of self-hosted runner in array of string
  labels:
    - linux.2xlarge
    - windows-latest-xl
    - linux-multi-gpu
```

You don't need to write the configuration file from scratch. `actionlint` can generate the default
configuration file.

    $ actionlint -init-config


## USAGE ON CI SERVICES

Please try a download script.

https://github.com/rhysd/actionlint/blob/main/scripts/download-actionlint.bash

It downloads the latest version of actionlint executable to the current directory automatically.
On GitHub Actions environment, it sets a file path to executable to`executable` output for using
the executable in the following steps easily.

Here is an example of simple workflow to run actionlint on GitHub Actions. Please ensure `shell: bash`
since the default shell for Windows runners is `pwsh`.

```
name: Lint GitHub Actions workflows
on: [push, pull_request]

jobs:
  actionlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download actionlint
        id: get_actionlint
        run: bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
        shell: bash
      - name: Check workflow files
        run: ${{ steps.get_actionlint.outputs.executable }} -color
        shell: bash
```

or simply run

```yaml
- name: Check workflow files
  run: |
    bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
    ./actionlint -color
  shell: bash
```


## EXIT STATUS

`actionlint` command exits with one of the following exit statuses.

  - **0**: It ran successfully and no problem was found.
  - **1**: It ran successfully and some problem was found.
  - **2**: It failed due to invalid command line option.
  - **3**: It failed due to some fatal error.


## PLAYGROUND

Thanks to WebAssembly, actionlint playground is available on your browser. It never sends any data
to outside of the browser.

https://rhysd.github.io/actionlint/

Paste your workflow content to the code editor at left pane. It automatically shows the results at
right pane. When editing the workflow content at the left pane, the results will be updated on the
fly in the right pane. Clicking an error message in the results table moves a cursor to the
position of the error in the code editor.


## REFERENCES

### List of all checks

https://github.com/rhysd/actionlint/blob/main/README.md#checks

### actionlint Go API reference

https://pkg.go.dev/github.com/rhysd/actionlint

### Workflow syntax

https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

### Expression syntax in ${{ }}

https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions

### shellcheck

https://github.com/koalaman/shellcheck

### pyflakes

https://github.com/PyCQA/pyflakes


## BUGS

Please visit issues page to see known bugs. If you found a new bug or have some feature request,
please report by making a new issue.

https://github.com/rhysd/actionlint/issues


## COPYRIGHT

**actionlint** is licensed under the MIT License: `Copyright (c) 2021 rhysd`

https://github.com/rhysd/actionlint/blob/main/LICENSE.txt

<!-- vim: set ft=markdown: -->
