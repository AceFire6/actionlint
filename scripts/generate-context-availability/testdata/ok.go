// Code generated by actionlint/scripts/generate-context-availability. DO NOT EDIT.

package actionlint

// ContextAvailability returns 2 values availability of given workflow key.
// 1st return value indicates what contexts are available. Empty slice means any contexts are available.
// 2nd return value indicates what special functions are available. Empty slice means no special functions are available.
// The 'key' parameter should represents a workflow key like "jobs.<job_id>.concurrency".
//
// This function was generated from https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability.
// See the script for more details: https://github.com/rhysd/actionlint/blob/main/scripts/generate-context-availability/
func ContextAvailability(key string) ([]string, []string) {
	switch key {
	case "concurrency":
		return []string{"github", "inputs"}, []string{}
	case "env":
		return []string{"github", "secrets", "inputs"}, []string{}
	case "jobs.<job_id>.concurrency":
		return []string{"github", "needs", "strategy", "matrix", "inputs"}, []string{}
	case "jobs.<job_id>.container":
		return []string{"github", "needs", "strategy", "matrix", "env", "secrets", "inputs"}, []string{}
	case "jobs.<job_id>.container.credentials":
		return []string{"github", "needs", "strategy", "matrix", "env", "secrets", "inputs"}, []string{}
	case "jobs.<job_id>.container.env.<env_id>":
		return []string{"github", "needs", "strategy", "matrix", "job", "runner", "env", "secrets", "inputs"}, []string{}
	case "jobs.<job_id>.continue-on-error":
		return []string{"github", "needs", "strategy", "matrix", "inputs"}, []string{}
	case "jobs.<job_id>.defaults.run":
		return []string{"github", "needs", "strategy", "matrix", "env", "inputs"}, []string{}
	case "jobs.<job_id>.env":
		return []string{"github", "needs", "strategy", "matrix", "secrets", "inputs"}, []string{}
	case "jobs.<job_id>.environment":
		return []string{"github", "needs", "strategy", "matrix", "inputs"}, []string{}
	case "jobs.<job_id>.environment.url":
		return []string{"github", "needs", "strategy", "matrix", "job", "runner", "env", "steps", "inputs"}, []string{}
	case "jobs.<job_id>.if":
		return []string{"github", "needs", "inputs"}, []string{"always", "cancelled", "success", "failure"}
	case "jobs.<job_id>.name":
		return []string{"github", "needs", "strategy", "matrix", "inputs"}, []string{}
	case "jobs.<job_id>.outputs.<output_id>":
		return []string{"github", "needs", "strategy", "matrix", "job", "runner", "env", "secrets", "steps", "inputs"}, []string{}
	case "jobs.<job_id>.runs-on":
		return []string{"github", "needs", "strategy", "matrix", "inputs"}, []string{}
	case "jobs.<job_id>.secrets.<secrets_id>":
		return []string{"github", "needs", "strategy", "matrix", "secrets", "inputs"}, []string{}
	case "jobs.<job_id>.services":
		return []string{"github", "needs", "strategy", "matrix", "inputs"}, []string{}
	case "jobs.<job_id>.services.<service_id>.credentials":
		return []string{"github", "needs", "strategy", "matrix", "env", "secrets", "inputs"}, []string{}
	case "jobs.<job_id>.services.<service_id>.env.<env_id>":
		return []string{"github", "needs", "strategy", "matrix", "job", "runner", "env", "secrets", "inputs"}, []string{}
	case "jobs.<job_id>.steps.continue-on-error":
		return []string{"github", "needs", "strategy", "matrix", "job", "runner", "env", "secrets", "steps", "inputs"}, []string{"hashfiles"}
	case "jobs.<job_id>.steps.env":
		return []string{"github", "needs", "strategy", "matrix", "job", "runner", "env", "secrets", "steps", "inputs"}, []string{"hashfiles"}
	case "jobs.<job_id>.steps.if":
		return []string{"github", "needs", "strategy", "matrix", "job", "runner", "env", "steps", "inputs"}, []string{"always", "cancelled", "success", "failure", "hashfiles"}
	case "jobs.<job_id>.steps.name":
		return []string{"github", "needs", "strategy", "matrix", "job", "runner", "env", "secrets", "steps", "inputs"}, []string{"hashfiles"}
	case "jobs.<job_id>.steps.run":
		return []string{"github", "needs", "strategy", "matrix", "job", "runner", "env", "secrets", "steps", "inputs"}, []string{"hashfiles"}
	case "jobs.<job_id>.steps.timeout-minutes":
		return []string{"github", "needs", "strategy", "matrix", "job", "runner", "env", "secrets", "steps", "inputs"}, []string{"hashfiles"}
	case "jobs.<job_id>.steps.with":
		return []string{"github", "needs", "strategy", "matrix", "job", "runner", "env", "secrets", "steps", "inputs"}, []string{"hashfiles"}
	case "jobs.<job_id>.steps.working-directory":
		return []string{"github", "needs", "strategy", "matrix", "job", "runner", "env", "secrets", "steps", "inputs"}, []string{"hashfiles"}
	case "jobs.<job_id>.strategy":
		return []string{"github", "needs", "inputs"}, []string{}
	case "jobs.<job_id>.timeout-minutes":
		return []string{"github", "needs", "strategy", "matrix", "inputs"}, []string{}
	case "jobs.<job_id>.with.<with_id>":
		return []string{"github", "needs", "strategy", "matrix", "inputs"}, []string{}
	case "on.workflow_call.inputs.<inputs_id>.default":
		return []string{"github", "inputs"}, []string{}
	case "on.workflow_call.outputs.<output_id>.value":
		return []string{"github", "jobs", "inputs"}, []string{}
	default:
		return []string{}, []string{}
	}
}

// SpecialFunctionNames is a map from special function name to available workflow keys.
// Some functions are only available at specific positions. This variable is useful when you want to
// know which functions are special and what workflow keys support them.
//
// This function was generated from https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability.
// See the script for more details: https://github.com/rhysd/actionlint/blob/main/scripts/generate-context-availability/
var SpecialFunctionNames = map[string][]string{"always": []string{"jobs.<job_id>.if", "jobs.<job_id>.steps.if"}, "cancelled": []string{"jobs.<job_id>.if", "jobs.<job_id>.steps.if"}, "failure": []string{"jobs.<job_id>.if", "jobs.<job_id>.steps.if"}, "hashfiles": []string{"jobs.<job_id>.steps.continue-on-error", "jobs.<job_id>.steps.env", "jobs.<job_id>.steps.if", "jobs.<job_id>.steps.name", "jobs.<job_id>.steps.run", "jobs.<job_id>.steps.timeout-minutes", "jobs.<job_id>.steps.with", "jobs.<job_id>.steps.working-directory"}, "success": []string{"jobs.<job_id>.if", "jobs.<job_id>.steps.if"}}
